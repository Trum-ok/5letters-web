services:
    backend:
      build:
        context: ./backend
        args:
          - APP_PORT=${APP_PORT}
          - PROMETHEUS_PORT=${PROMETHEUS_PORT}
      volumes:
        - ./backend:/app 
      ports:
        - "${APP_PORT}:${APP_PORT}"
        - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
      environment:
        APP_PORT: ${APP_PORT}
        PROMETHEUS_PORT: ${PROMETHEUS_PORT}
      healthcheck:
        test: ["CMD-SHELL", "wget --spider http://0.0.0.0:${APP_PORT}/ || exit 1"]
        interval: 60s
        timeout: 10s
        retries: 2
        start_period: 30s
      networks:
        - backend_net

    backend_nginx:
        build:
            context: ./
            dockerfile: ./nginxb/Dockerfile
        volumes:
            - ./ssl:/etc/ssl
            - ./nginxb/logs:/var/log/nginx 
        environment:
            GUNICORN_PORT: ${GUNICORN_PORT}
            PROMETHEUS_PORT: ${PROMETHEUS_PORT}
            BACKEND_PORT: ${BACK_PORT}
            SERVER_NAME: ${SERVER_NAME}
        networks:
            - public_net
            - backend_net
        ports:
            - "${BACK_PORT}:443"
        depends_on:
            - backend 

    frontend:
        build: 
            context: ./frontend
            dockerfile: ./Dockerfile
        volumes:
            - ./frontend/nginx/conf.d:/etc/nginx/conf.d
            - ./ssl:/etc/ssl
        ports:
            - "${FRONT_PORT_HTTP}:80"
            - "${FRONT_PORT}:443"
        environment:
            FRONT_PORT: ${FRONT_PORT}
            VITE_BACK_PORT: ${VITE_BACK_PORT}
            VITE_BACK_IP: ${VITE_BACK_IP}
            FRONT_NGINX_SERVER_NAME: ${FRONT_NGINX_SERVER_NAME}
        healthcheck:
            test: [
              "CMD-SHELL",
              "curl --fail --cacert /etc/ssl/localhost.crt https://localhost:443 || exit 1"
            ]
            interval: 60s
            timeout: 5s
            retries: 2
            start_period: 15s
        depends_on:
            - backend
        networks:
            - public_net
    
    filebeat:
        build:
            context: ./elk/filebeat
            dockerfile: ./Dockerfile
        volumes:
            - ./nginxb/logs:/var/log/nginx:ro
            - ./backend/logs:/var/log/flask:ro
            - ./ssl:/etc/ssl
            - ./elk_certs/:/etc/elk_certs
        environment:
            ELASTIC_HOSTS: "elasticsearch"
            # ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT}
            ELASTIC_USERNAME: ${ELASTIC_USERNAME}
            ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
            LOGSTASH_HOST: "logstash"
        networks:
            - elk_network
        depends_on:
            elasticsearch:
                condition: service_healthy
    
    elasticsearch:
        image: elasticsearch:8.17.2
        container_name: elasticsearch
        environment:
            discovery.type: single-node
            ES_JAVA_OPTS: -Xms512m -Xmx512m
            # ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT}
            ELASTIC_USERNAME: ${ELASTIC_USERNAME}
            ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
            xpack.security.enabled: true
        ports:
            # - "${ELASTIC_PORT}:9200"
            - "9200:9200"
            - "9300:9300"
        volumes:
            - ./ssl:/etc/ssl
            - elasticsearch_data:/usr/share/elasticsearch/data
            - ./elk/logstash/templates:/usr/share/logstash/templates
            # - ./elk_certs/:/etc/elk_certs
            - ./elk/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
            - ./elk_certs/elasticsearch/elasticsearch.p12:/usr/share/elasticsearch/config/certs/elasticsearch.p12
        networks:
            - elk_network
        healthcheck:
            test: ["CMD-SHELL", "curl -sSku ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD} https://localhost:9200/_cluster/health | grep -qE '(green|yellow)'"]
            interval: 15s
            timeout: 10s
            retries: 3
    
    logstash:
        image: logstash:8.17.2
        container_name: logstash
        volumes:
            - ./elk/logstash/templates:/usr/share/logstash/templates:ro
            - ./elk/logstash/config:/usr/share/logstash/pipeline
            # - ./elk/logstash/templates:/usr/share/logstash/templates
            # - ./ssl:/etc/ssl
            - ./elk_certs/:/etc/elk_certs
        environment:
            LS_JAVA_OPTS: "-Xms512m -Xmx512m"
            ELASTIC_HOST: "elasticsearch"
            # ELASTIC_PORT: ${ELASTIC_PORT}
            ELASTIC_USERNAME: ${ELASTIC_USERNAME}
            ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
        ports:
            - "5044:5044"
        networks:
            - elk_network
        depends_on:
            elasticsearch:
                condition: service_healthy
    
    kibana:
        image: kibana:8.17.2
        ports:
            - "5601:5601"
        environment:
            # ELASTICSEARCH_HOSTS: https://elasticsearch:9200
            # - ELASTICSEARCH_USERNAME=elastic
            # - ELASTICSEARCH_PASSWORD=YourSecurePassword123!
            # ELASTIC_USERNAME: ${ELASTIC_USERNAME}
            # ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
            ELASTIC_SSL_CERTIFICATEAUTHORITIES: /usr/share/kibana/config/certs/ca.crt
        volumes:
            - ./elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
            - ./elk_certs/:/etc/elk_certs
            - ./elk_certs/ca/ca.crt:/usr/share/kibana/config/certs/ca.crt
        networks:
            - elk_network
        depends_on:
            elasticsearch:
                condition: service_healthy

volumes:
    elasticsearch_data:

networks:
    public_net:
    backend_net:
        # internal: true
        driver: bridge
    elk_network:
        driver: bridge
